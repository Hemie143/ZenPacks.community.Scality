name: ZenPacks.community.Scality

zProperties:
  DEFAULTS:
    category: Scality
  zScalityUsername:
    type: string
  zScalityPassword:
    type: password
  zScalityUseSSL:
    type: boolean
    default: true
  zScalityS3BucketHost:
    type: string
  zScalityUTAPIHost:
    type: string
  zScalityUTAPIPort:
    type: int
    default: 8100
  zScalityS3AccessKeys:
    type: lines
  zScalityS3SecretKeys:
    type: lines

classes:
  ScalitySupervisor:
    base: [zenpacklib.Component]
    label: Scality Supervisor
    monitoring_templates: [ScalitySupervisor]
    relationships:
      scalityS3Clusters:
        label: S3 Clusters
      scalityVolumes:
        label: Volumes
      scalityRings:
        label: Rings
      scalityServers:
        label: Servers
    properties:
      get_supv2_status:
        label: Status
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 60
      get_bizstoresup_status:
        label: BizStore Status
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 80
      version:
        label: Version
        grid_display: true
        label_width: 60
      complete_version:
        label: Complete Version
        grid_display: false

  ScalityConnector:
    base: [zenpacklib.Component]
    label: Scality Connector
    monitoring_templates: [ScalityConnector]
    relationships:
      DEFAULTS:
        grid_display: false
      scalityRing:
        grid_display: true
        label: Ring
        content_width: 80
    properties:
      get_status:
        label: Status
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 60
      get_state:
        label: State
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 120
      protocol:
        label: Protocol
        grid_display: true
      detached:
        label: Detached
        grid_display: true
      address:
        label: Address
        grid_display: true
      connector_id:
        label: ID
        grid_display: false
      ring:
        label: RING
        grid_display: false

  ScalityDisk:
    base: [zenpacklib.Component]
    label: Scality Disk
    monitoring_templates: [ScalityDisk]
    relationships:
      DEFAULTS:
        grid_display: false
      scalityServer:
        grid_display: true
        label: Server
        label_width: 100
    properties:
      get_status:
        label: Status
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 60
      get_state:
        label: State
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 60
      disk_id:
        label: Disk ID
        grid_display: false
      host:
        label: Host
        grid_display: false
      server_id:
        label: Server ID
        grid_display: false
      server_name:
        label: Server Hostname
        grid_display: false
      server_ip:
        label: Server IP Address
        grid_display: false
      fs_id:
        label: Filesystem ID
        grid_display: false
      rings:
        label: Rings
        grid_display: false

  ScalityNode:
    base: [zenpacklib.Component]
    label: Scality Node
    monitoring_templates: [ScalityNode]
    relationships:
      DEFAULTS:
        grid_display: false
      scalityRing:
        grid_display: true
        label: Ring
        content_width: 80
    properties:
      get_state:
        label: State
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 60
      reachable:
        label: Reachable
        grid_display: true
        datapoint: node_reachable
        renderer: Zenoss.render.severity
      conf_mismatch:
        label: Configuration
        grid_display: true
        datapoint: node_conf_mismatch
        renderer: Zenoss.render.severity
      tasks_blocked:
        label: Stuck tasks
        grid_display: true
        datapoint: node_tasks_blocked
        renderer: Zenoss.render.severity
      ring:
        label: Ring
        grid_display: false
      admin_endpoint:
        label: Admin Endpoint
        grid_display: false
      chord_endpoint:
        label: CHORD Endpoint
        grid_display: false
      server_endpoint:
        label: Sagentd Endpoint
        grid_display: false

  ScalityRing:
    base: [zenpacklib.Component]
    label: Scality Ring
    monitoring_templates: [ScalityRing]
    relationships:
      scalitySupervisor:
        grid_display: false
      scalityNodes:
        label: Nodes
      scalityConnectors:
        label: Connectors
    properties:
      DEFAULTS:
        grid_display: false
      type:
        label: Type
        grid_display: true
        label_width: 60
      get_status:
        label: Status
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 60
      get_state:
        label: State
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 80
      planning_period:
        label: Planning period (days)
        grid_display: false

  ScalityS3BucketAccount:
    base: [zenpacklib.Component]
    label: Scality S3 Bucket Account

  ScalityS3Bucket:
    base: [zenpacklib.Component]
    label: Scality S3 Bucket
    monitoring_templates: [ScalityS3Bucket]
    properties:
      creation_date:
        label: Creation date
        grid_display: false
      bucket_name:
        label: Bucket Name
        grid_display: false
      key_index:
        type: int
        grid_display: false
        details_display: false

  ScalityS3Cluster:
    base: [zenpacklib.Component]
    label: Scality S3 Cluster
    monitoring_templates: [ScalityS3Cluster]
    relationships:
      scalitySupervisor:
        grid_display: false
    properties:
      get_cluster_health:
        label: Cluster Health
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 100
      cluster_id:
        label: Cluster ID
        grid_display: false

  ScalityServer:
    base: [zenpacklib.Component]
    label: Scality Server
    monitoring_templates: [ScalityServer]
    relationships:
      scalitySupervisor:
        grid_display: false
      scalityDisks:
        label: Disks
    properties:
      ip_address:
        label: IP Address
        grid_display: true
        renderer: Zenoss.render.ipAddress
      server_type:
        label: Server Type
        grid_display: true
        label_width: 100
      zone:
        label: Zone
        grid_display: true
      diskstatus:
        label: Disk Status
        grid_display: true
        datapoint: server_diskstatus
        renderer: Zenoss.render.severity
      get_status:
        label: Status
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 60
      get_state:
        label: State
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 80
      server_id:
        label: Server ID
        grid_display: false
      disks:
        label: Disks
        grid_display: false
      rings:
        label: Rings
        grid_display: false
      roles:
        label: Roles
        grid_display: false

  ScalityVolume:
    base: [zenpacklib.Component]
    label: Scality Volume
    monitoring_templates: [ScalityVolume]
    relationships:
      scalitySupervisor:
        grid_display: false
    properties:
      get_status:
        label: Status
        api_only: true
        api_backendtype: method
        grid_display: true
        label_width: 60
      volume_id:
        label: Volume ID
        grid_display: false
      device_id:
        label: Device ID
        grid_display: false
      supv2_id:
        label: SupV2 backend ID
        grid_display: false
      data_ring:
        label: Data RING
        grid_display: false
      meta_ring:
        label: Meta RING
        grid_display: false

class_relationships:
  - Products.ZenModel.Device.Device 1:MC ScalitySupervisor
  - ScalitySupervisor 1:MC ScalityS3Cluster
  - ScalitySupervisor 1:MC ScalityServer
  - ScalitySupervisor 1:MC ScalityVolume
  - ScalitySupervisor 1:MC ScalityRing
  - ScalityServer 1:MC ScalityDisk
  - ScalityRing 1:MC ScalityNode
  - ScalityRing 1:MC ScalityConnector
  - Products.ZenModel.Device.Device 1:MC ScalityS3BucketAccount
  - ScalityS3BucketAccount 1:MC ScalityS3Bucket

device_classes:
  /Server/SSH/Linux/Scality:
    zProperties:
      zPingMonitorIgnore: false
      zSnmpMonitorIgnore: true
      zCollectorPlugins:
        - zenoss.cmd.uname
        - zenoss.cmd.linux.df
        - zenoss.cmd.linux.cpuinfo
        - zenoss.cmd.linux.interfaces
        - zenoss.cmd.linux.lvm
        - zenoss.cmd.linux.memory
        - zenoss.cmd.linux.netstat_an
        - zenoss.cmd.linux.netstat_rn
        - zenoss.cmd.linux.process
        - zenoss.cmd.linux.sudo_dmidecode
        - zenoss.cmd.linux.os_release
        - zenoss.cmd.linux.os_service
        - community.json.scalityring

    templates:
      ScalitySupervisor:
        targetPythonClass: ZenPacks.community.Scality.ScalitySupervisor
        datasources:
          supervisor:
            type: Python
            plugin_classname: ZenPacks.community.Scality.dsplugins.supervisor.Supervisor
            datapoints:
              status:
                rrdtype: GAUGE
              bizstore_status:
                rrdtype: GAUGE

      ScalityRing:
        targetPythonClass: ZenPacks.community.Scality.ScalityRing
        datasources:
          ring:
            type: Python
            plugin_classname: ZenPacks.community.Scality.dsplugins.ring.Ring
            datapoints:
              status:
                rrdtype: GAUGE
              state:
                rrdtype: GAUGE
              diskspace_total:
                rrdtype: GAUGE
                rrdmin: 0
              diskspace_used:
                rrdtype: GAUGE
                rrdmin: 0
              diskspace_stored:
                rrdtype: GAUGE
                rrdmin: 0
              diskspace_est_net_available:
                rrdtype: GAUGE
                rrdmin: 0
              diskspace_net:
                rrdtype: GAUGE
                rrdmin: 0
              number_of_objects:
                rrdtype: GAUGE
                rrdmin: 0
              planning_growth_month:
                rrdtype: GAUGE
                rrdmin: 0
              planning_days_before_threshold:
                rrdtype: GAUGE
                rrdmin: 0
              unique_number_of_objects:
                rrdtype: GAUGE
                rrdmin: 0
              object_average_size:
                rrdtype: GAUGE
                rrdmin: 0
              object_average_unique_size:
                rrdtype: GAUGE
                rrdmin: 0
        graphs:
          Capacity:
            units: bytes
            miny: 0
            base: true
            graphpoints:
              Stored Capacity:
                lineType: AREA
                dpName: ring_diskspace_stored
                sequence: 1
              Used Capacity:
                lineType: AREA
                dpName: ring_diskspace_used
                sequence: 2
              Total Capacity:
                lineType: AREA
                dpName: ring_diskspace_total
                sequence: 3
          Net Capacity:
            units: bytes
            miny: 0
            base: true
            graphpoints:
              Net Used:
                lineType: AREA
                dpName: ring_diskspace_net
                sequence: 1
                stacked: true
              Net Available:
                lineType: AREA
                dpName: ring_diskspace_est_net_available
                sequence: 2
                stacked: true
          Forecast Monthly growth:
            units: bytes
            base: true
            graphpoints:
              Growth per month:
                lineType: AREA
                dpName: ring_planning_growth_month
                sequence: 1
          Forecast Days before reaching 80 percent capacity:
            units: days
            graphpoints:
              Days remaining:
                dpName: ring_planning_days_before_threshold
                sequence: 1
          Objects:
            units: objects
            miny: 0
            graphpoints:
              Objects:
                dpName: ring_number_of_objects
                sequence: 1
              Unique Objects:
                dpName: ring_unique_number_of_objects
                sequence: 2
          Objects Size:
            units: bytes
            miny: 0
            base: true
            graphpoints:
              Average Object Size:
                dpName: ring_object_average_size
                sequence: 1
              Average Unique Object Size:
                dpName: ring_object_average_unique_size
                sequence: 2

      ScalityServer:
        targetPythonClass: ZenPacks.community.Scality.ScalityServer
        datasources:
          server:
            type: Python
            plugin_classname: ZenPacks.community.Scality.dsplugins.server.Server
            datapoints:
              diskstatus:
                rrdtype: GAUGE
              status:
                rrdtype: GAUGE
              state:
                rrdtype: GAUGE

      ScalityNode:
        targetPythonClass: ZenPacks.community.Scality.ScalityNode
        datasources:
          node:
            type: Python
            plugin_classname: ZenPacks.community.Scality.dsplugins.node.Node
            datapoints:
              state:
                rrdtype: GAUGE
              reachable:
                rrdtype: GAUGE
              conf_mismatch:
                rrdtype: GAUGE
              nb_chunks:
                rrdtype: GAUGE
              nb_tasks:
                rrdtype: GAUGE
              tasks_blocked:
                rrdtype: GAUGE
        graphs:
          Chunks:
            units: chunks
            miny: 0
            base: true
            graphpoints:
              Stored objects:
                lineType: AREA
                dpName: node_nb_chunks
                sequence: 1
          Tasks:
            units: chunks
            miny: 0
            base: true
            graphpoints:
              Pending Tasks:
                dpName: node_nb_tasks
                sequence: 1

      ScalityS3Bucket:
        targetPythonClass: ZenPacks.community.Scality.ScalityS3Bucket
        datasources:
          s3bucket:
            type: Python
            plugin_classname: ZenPacks.community.Scality.dsplugins.s3bucket.S3Bucket
            datapoints:
              num_objects:
                rrdtype: GAUGE_MIN_0
              bucket_size:
                rrdtype: GAUGE_MIN_0
              incoming_bytes:
                rrdtype: GAUGE_MIN_0
              outgoing_bytes:
                rrdtype: GAUGE_MIN_0
        graphs:
          Bucket Size:
            units: bytes
            miny: 0
            base: true
            graphpoints:
              Bucket Size:
                lineType: AREA
                dpName: s3bucket_bucket_size
                sequence: 1
          Number of Objects:
            units: objects
            miny: 0
            graphpoints:
              Number of Objects:
                lineType: AREA
                dpName: s3bucket_num_objects
                sequence: 1
          Response Time:
            units: seconds
            miny: 0
            graphpoints:
              Response Time:
                dpName: s3bucket_response_time
                sequence: 1

      ScalityS3Cluster:
        targetPythonClass: ZenPacks.community.Scality.ScalityS3Cluster
        datasources:
          s3cluster:
            type: Python
            plugin_classname: ZenPacks.community.Scality.dsplugins.s3cluster.S3Cluster
            datapoints:
              health:
                rrdtype: GAUGE

      ScalityDisk:
        targetPythonClass: ZenPacks.community.Scality.ScalityDisk
        datasources:
          disk:
            type: Python
            plugin_classname: ZenPacks.community.Scality.dsplugins.disk.Disk
            datapoints:
              status:
                rrdtype: GAUGE
              state:
                rrdtype: GAUGE
              number_inodes:
                rrdtype: GAUGE
              diskspace_total:
                rrdtype: GAUGE
              diskspace_used:
                rrdtype: GAUGE
              diskspace_stored:
                rrdtype: GAUGE
              diskspace_used_perc:
                rrdtype: GAUGE
        graphs:
          Diskspace:
            units: bytes
            miny: 0
            base: true
            graphpoints:
              Diskspace Total Capacity:
                lineType: AREA
                dpName: disk_diskspace_total
                sequence: 1
              Diskspace Used Capacity:
                lineType: AREA
                dpName: disk_diskspace_used
                sequence: 2
              Diskspace Used by RING:
                lineType: AREA
                dpName: disk_diskspace_stored
                sequence: 3
          Diskspace percentage:
            units: percent
            miny: 0
            maxy: 100
            graphpoints:
              Diskspace Used Capacity:
                dpName: disk_diskspace_used_perc
                sequence: 1
          inodes:
            units: inodes
            miny: 0
            graphpoints:
              inodes:
                lineType: AREA
                dpName: disk_number_inodes
                sequence: 1

      ScalityVolume:
        targetPythonClass: ZenPacks.community.Scality.ScalityVolume
        datasources:
          volume:
            type: Python
            plugin_classname: ZenPacks.community.Scality.dsplugins.volume.Volume
            datapoints:
              status:
                rrdtype: GAUGE

      ScalityConnector:
        targetPythonClass: ZenPacks.community.Scality.ScalityConnector
        datasources:
          connector:
            type: Python
            plugin_classname: ZenPacks.community.Scality.dsplugins.connector.Connector
            datapoints:
              status:
                rrdtype: GAUGE
              state:
                rrdtype: GAUGE

event_classes:
  /Status/Scality:
    remove: false
  /Status/Scality/Supervisor:
    remove: false
  /Status/Scality/Connector:
    remove: false
  /Status/Scality/Disk:
    remove: false
    transform: |-
      import re

      if evt.eventKey in ['DiskState', 'DiskStatus']:
        # Initialize existing_count.
        existing_count = 0

        zep = getFacade('zep')
        # Create filter without taking the severity into account

        evt_filter = zep.createEventFilter(
          status=(0,1,2),							# New, ack'd or suppressed
          element_identifier=evt.device,
          element_sub_identifier=evt.component,
          event_key=evt.eventKey
          )

        summaries = zep.getEventSummaries(offset=0, limit=1, filter=evt_filter)
        if summaries['total']:
          existing_count = list(summaries['events'])[0]['count']

        if existing_count < 3:
          evt.severity = 2

  /Status/Scality/Node:
    remove: false
    transform: |-
      import re

      if evt.eventKey in ['NodeTasksBlocked'] and evt.severity > 2:
          evt.severity = 2

      if evt.eventKey in ['NodeConfig', 'NodeState']:
          # Initialize existing_count.
          existing_count = 0

          zep = getFacade('zep')
          # Create filter without taking the severity into account

          evt_filter = zep.createEventFilter(
            status=(0,1,2),							# New, ack'd or suppressed
            element_identifier=evt.device,
            element_sub_identifier=evt.component,
            event_key=evt.eventKey
            )

          summaries = zep.getEventSummaries(offset=0, limit=1, filter=evt_filter)
          if summaries['total']:
            existing_count = list(summaries['events'])[0]['count']

          if existing_count < 3:
            evt.severity = 2

  /Status/Scality/Ring:
    remove: false
    transform: |-
      import re

      if evt.eventKey == 'RingState':
        r = re.match('Ring .* - State is (.*)', evt.message)
        if r:
          state = r.group(1)
          states = state.split(', ')
          if u'RUN' in states and len(states) > 1:
            # Initialize existing_count.
            existing_count = 0

            zep = getFacade('zep')
            # Create filter without taking the severity into account

            evt_filter = zep.createEventFilter(
              status=(0,1,2),							# New, ack'd or suppressed
              element_identifier=evt.device,
              element_sub_identifier=evt.component,
              event_key=evt.eventKey
              )

            summaries = zep.getEventSummaries(offset=0, limit=1, filter=evt_filter)
            if summaries['total']:
              existing_count = list(summaries['events'])[0]['count']

            if existing_count < 3:
              evt.severity = 2

  /Status/Scality/S3Cluster:
    remove: false
    transform: |-
      import re
      import time

      if evt.eventKey == 'S3ClusterHealth':
          max_count = 4
          poll_interval = 300		# seconds

          current_time = time.time() * 1000
          timeframe = poll_interval * 2.1 * 1000
          last_seen_back = current_time - timeframe


          # Initialize existing_count.
          existing_count = 0
          zep = getFacade('zep')

          # Create filter without taking the severity into account
          evt_filter = zep.createEventFilter(
            status=(0,1),												# New or ack'd
            element_identifier=evt.device,
            element_sub_identifier=evt.component,
            event_key=evt.eventKey,
            last_seen=[last_seen_back, current_time],					# Check recent events, start_time and end_time
            )

          summaries = zep.getEventSummaries(offset=0, limit=1, filter=evt_filter)			# {'next_offset': None, 'total': 0, 'limit': 1, 'events': <generator object <genexpr> at 0x7f74404a4410>}
          if summaries['total']:
            event0 = list(summaries['events'])
            if event0:
              existing_count = event0[0]['count']

          if existing_count < max_count:
            evt.severity = 2

          # Close old events
          evt_filter = zep.createEventFilter(
            status=(0,1),												# New or ack'd
            element_identifier=evt.device,
            element_sub_identifier=evt.component,
            event_key=evt.eventKey,
            last_seen=[0, last_seen_back],							# Check old events
            )
          zep.closeEventSummaries(eventFilter=evt_filter, userName='admin')

  /Status/Scality/Server:
    remove: false
    transform: |-
      if evt.severity > 2:
        evt.severity = 2

  /Status/Scality/Volume:
    remove: false

